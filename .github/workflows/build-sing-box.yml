name: Create Release sing-box Mediatek MT7622

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: "v${{ matrix.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        tag: ['24.10.3'] 
        build_env:
          - pkgarch: aarch64_cortex-a53
            target: mediatek
            subtarget: mt7622 

    steps:
      # 1. Получаем исходники ImmortalWRT
      - name: Checkout исходников ImmortalWRT
        uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ matrix.tag }} 
          fetch-depth: 0 

      # 2. Настраиваем фиды и конфигурацию
      - name: Update and install feeds
        run: |
          pkgarch=${{ matrix.build_env.pkgarch}}
          target=${{ matrix.build_env.target}}
          subtarget=${{ matrix.build_env.subtarget}}
          echo "Building for: v${{ matrix.tag }}, Target: ${target}, Subtarget: ${subtarget}, Arch: ${pkgarch}"
          
          wget https://downloads.immortalwrt.org/releases/${{ matrix.tag }}/targets/${target}/${subtarget}/feeds.buildinfo -O feeds.conf
          echo "src-git shtorm7 https://github.com/shtorm-7/sing-box-extended.git;main" >> ./feeds.conf
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          wget https://downloads.immortalwrt.org/releases/${{ matrix.tag }}/targets/${target}/${subtarget}/config.buildinfo -O .config
          make defconfig

      # 2.5 (НОВОЕ) Восстанавливаем кэш
      - name: Cache build assets
        uses: actions/cache@v4
        with:
          path: |
            staging_dir
            dl
          key: ${{ runner.os }}-${{ matrix.tag }}-${{ hashFiles('.config', 'feeds.conf') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.tag }}-

      # 3. Собираем тулчейн (будет быстро, если кэш сработал)
      - name: Make Download and World (Toolchain)
        run: |
          export FORCE_UNSAFE_CONFIGURE=1
          
          echo "CONFIG_PACKAGE_sing-box=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-sing-box=m" >> .config
          
          if [[ $(uname -m) == "aarch64" ]]; then
            echo 'CONFIG_GOLANG_EXTERNAL_BOOTSTRAP_ROOT="/usr/local/go/bin/go"' >> .config
            echo 'CONFIG_GOLANG_BUILD_CACHE_DIR=""' >> .config
          fi
          
          make defconfig
          
          echo "Make tools/install"
          make tools/install -i -j $(nproc)
          echo "Make toolchain/install"
          make toolchain/install -i -j $(nproc)
          echo "Make Kernel Compile"
          make target/linux/compile -i -j $(nproc)

      # 4. (ИСПРАВЛЕНО) Собираем .ipk пакеты
      - name: Make ipks for sing-box
        run: |
          # Цель 'compile' сама вызовет 'download' и 'prepare'.
          # Убираем 'clean', который вызывал ошибку.
          # Добавляем V=s для подробного лога, если снова будет ошибка.
          make package/feeds/shtorm7/sing-box/compile -j $(nproc) V=s
          make package/feeds/shtorm7/luci-app-sing-box/compile -j $(nproc) V=s

      # 5. Готовим артефакты
      - name: Prepare artifacts
        run: |
          tag_name=${{ github.ref_name }}
          if [ -z "$tag_name" ]; then
            tag_name="manual-build"
          fi
          
          mkdir -p singboxrelease
          postfix="${tag_name}_v${{ matrix.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          
          cp bin/packages/${{ matrix.build_env.pkgarch }}/shtorm7/sing-box_*.ipk singboxrelease/sing-box_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/shtorm7/luci-app-sing-box_*.ipk singboxrelease/luci-app-sing-box_${postfix}.ipk

      # 6. Публикуем Релиз (только по тегу)
      - name: Release (publish to GitHub Releases)
        uses: softprops/action-gh-release@v1
        with:
          files: singboxrelease/*.ipk
        if: "startsWith(github.ref, 'refs/tags/')"

      # 7. Загружаем Артефакт (только при ручном запуске)
      - name: Upload Artifact (for manual runs)
        uses: actions/upload-artifact@v4
        with:
          name: sing-box-packages
          path: singboxrelease/
        if: "!startsWith(github.ref, 'refs/tags/')"